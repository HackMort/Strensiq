'use strict';

// This function in included first in the core bundle stack,
// its also isolated from the bundle so that it could be used as an 
// individual utility as it holdes the core, more commonly used
// event handling functionality.

// ==================================================
//    Polyfills
// ==================================================

(function () {
  if (typeof window.CustomEvent === "function") return false;

  function CustomEvent(event, params) {
    params = params || { bubbles: false, cancelable: false, detail: null };
    var evt = document.createEvent('CustomEvent');
    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    return evt;
  }

  window.CustomEvent = CustomEvent;

  if ('NodeList' in window && !NodeList.prototype.forEach) {
    NodeList.prototype.forEach = function (callback, thisArg) {
      thisArg = thisArg || window;
      for (var i = 0; i < this.length; i++) {
        callback.call(thisArg, this[i], i, this);
      }
    };
  }
})();

(function () {
  "use strict";

  window.core = window.core || {};
  window.core.fn = {};

  // ==================================================
  //    Utility Functions
  // ==================================================

  /**
  * Trigger: creates a custom event
  * @param {String} event name
  * @param {Object} data to include in the event
  */
  window.core.fn.trigger = function trigger(name, data) {
    document.dispatchEvent(new CustomEvent(name, { detail: data }));
  };

  /**
  * Debounce
  * @param {Function} function to wrap
  * @param {Number} timeout in ms (`100`)
  * @param {Boolean} whether to execute at the beginning (`false`)
  * @return {fn}           Function
  */
  window.core.fn.debounce = function debounce(func, wait, immediate) {
    var timeout;
    return function () {
      var context = this,
        args = arguments;
      var later = function later() {
        timeout = null;
        if (!immediate) {
          func.apply(context, args);
        }
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) {
        func.apply(context, args);
      }
    };
  };

  /**
  * Throttle: executes a function based on a threshold of calls.
  * @param  {Function} fn         - callback function to execute
  * @param  {Number}   threshhold - millisecond threshold
  * @param  {Object}   scope      - what 'this' should be in the fn
  * @return {fn}           Function
  */
  window.core.fn.throttle = function throttle(fn, threshhold, scope) {
    threshhold = threshhold || 250;
    var last, deferTimer;
    return function () {
      var context = scope || this;

      var now = +new Date(),
        args = arguments;
      if (last && now < last + threshhold) {
        // hold on to it
        clearTimeout(deferTimer);
        deferTimer = setTimeout(function () {
          last = now;
          fn.apply(context, args);
        }, threshhold);
      } else {
        last = now;
        fn.apply(context, args);
      }
    };
  };

  /**
  * Is in Viewport: checks if any part of the element is within the viewport (vertically)
  * @param  {element}   element to check
  * @return {Boolean}         
  */
  window.core.fn.isInViewport = function isInViewport(element, offset) {
    var rect = element.getBoundingClientRect();
    var html = document.documentElement;
    offset = offset || 0;
    return rect.top >= 0 && rect.top <= (window.innerHeight || html.clientHeight) - offset || rect.bottom <= (window.innerHeight || html.clientHeight) && rect.bottom >= 0 || rect.top <= 0 && rect.bottom >= (window.innerHeight || html.clientHeight);
  };

  /**
  * Request Interval: combines setInterval with requestAnimationFrame for a more performant interval
  * @param  {Function} fn         - callback function to execute
  * @param  {Number}   delay - millisecond threshold
  * @return {fn}           Function
  */
  window.core.fn.requestInterval = function requestInterval(fn, delay) {
    var requestAnimFrame = function () {
      return window.requestAnimationFrame || function (callback) {
        window.setTimeout(callback, 1000 / 60);
      };
    }(),
      start = new Date().getTime(),
      handle = {};
    function loop() {
      handle.value = requestAnimFrame(loop);
      var current = new Date().getTime(),
        delta = current - start;
      if (delta >= delay) {
        fn.call();
        start = new Date().getTime();
      }
    }
    handle.value = requestAnimFrame(loop);
    return handle;
  };

  /**
 * Request Timeout: combines setTimeout with requestAnimationFrame for a more performant timeout
 * @param  {Function} fn         - callback function to execute
 * @param  {Number}   delay - millisecond threshold
 * @return {fn}           Function
 */
  window.core.fn.requestTimeout = function requestTimeout(fn, delay) {
    var requestAnimFrame = function () {
      return window.requestAnimationFrame || function (callback) {
        window.setTimeout(callback, 1000 / 60);
      };
    }(),
      start = new Date().getTime(),
      handle = {};

    function loop() {
      var current = new Date().getTime(),
        delta = current - start;

      if (delta >= delay) {
        fn.call();
      } else {
        handle.value = requestAnimFrame(loop);
      }
    }

    handle.value = requestAnimFrame(loop);
    return handle;
  };
})();

// Production steps of ECMA-262, Edition 6, 22.1.2.1
if (!Array.from) {
  Array.from = function () {
    var toStr = Object.prototype.toString;
    var isCallable = function isCallable(fn) {
      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
    };
    var toInteger = function toInteger(value) {
      var number = Number(value);
      if (isNaN(number)) {
        return 0;
      }
      if (number === 0 || !isFinite(number)) {
        return number;
      }
      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    };
    var maxSafeInteger = Math.pow(2, 53) - 1;
    var toLength = function toLength(value) {
      var len = toInteger(value);
      return Math.min(Math.max(len, 0), maxSafeInteger);
    };

    // The length property of the from method is 1.
    return function from(arrayLike /*, mapFn, thisArg */) {
      // 1. Let C be the this value.
      var C = this;

      // 2. Let items be ToObject(arrayLike).
      var items = Object(arrayLike);

      // 3. ReturnIfAbrupt(items).
      if (arrayLike == null) {
        throw new TypeError('Array.from requires an array-like object - not null or undefined');
      }

      // 4. If mapfn is undefined, then let mapping be false.
      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
      var T;
      if (typeof mapFn !== 'undefined') {
        // 5. else
        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
        if (!isCallable(mapFn)) {
          throw new TypeError('Array.from: when provided, the second argument must be a function');
        }

        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (arguments.length > 2) {
          T = arguments[2];
        }
      }

      // 10. Let lenValue be Get(items, "length").
      // 11. Let len be ToLength(lenValue).
      var len = toLength(items.length);

      // 13. If IsConstructor(C) is true, then
      // 13. a. Let A be the result of calling the [[Construct]] internal method 
      // of C with an argument list containing the single item len.
      // 14. a. Else, Let A be ArrayCreate(len).
      var A = isCallable(C) ? Object(new C(len)) : new Array(len);

      // 16. Let k be 0.
      var k = 0;
      // 17. Repeat, while k < lenâ€¦ (also steps a - h)
      var kValue;
      while (k < len) {
        kValue = items[k];
        if (mapFn) {
          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } else {
          A[k] = kValue;
        }
        k += 1;
      }
      // 18. Let putStatus be Put(A, "length", len, true).
      A.length = len;
      // 20. Return A.
      return A;
    };
  }();
}
"use strict";

// Cookie
/* (function () {
  // Handing Cookie Banner showing and hiding
  var showCookies = window.sessionStorage.getItem('cookieContainer') === "false" ? false : true;

  document.addEventListener("DOMContentLoaded", function () {
    // Don't do any bindings, or showing if we are past the cookie banner.
    if (!showCookies) return false;

    var cookieContainer = document.querySelectorAll('.cookieContainer')[0];
    var body = document.body;

    function toggleCookie(value) {
      cookieContainer.classList.toggle('cookieDisclaimer', value);
      body.classList.toggle('withCookie', value);
    }
    // Show the cookies
    toggleCookie(true);

    // Wire up a selector!
    document.querySelectorAll('[data-cookie="close"]')[0].addEventListener('click', function (e) {
      e.preventDefault();
      toggleCookie(false);
      window.sessionStorage.setItem('cookieContainer', false);
    });
  });

  var showSignUp = window.sessionStorage.getItem('signupmodule') === "false" ? false : true;

  // Signup Module
  document.addEventListener("DOMContentLoaded", function () {
    if (!showSignUp) return false;
    function hideSignUp(value) {
      var signUpModule = document.querySelectorAll('.signupmodule')[0];
      if (document.querySelectorAll('.signupmodule')[0] != undefined) {
        signUpModule.classList.toggle('signupmodule-open', value);
      }
    }
    hideSignUp(true);
    if (document.querySelectorAll('.signupmodule')[0] != undefined) document.querySelectorAll('.signupmodule .close')[0].addEventListener('click', function (e) {
      e.preventDefault();
      hideSignUp(false);
      window.sessionStorage.setItem('signupmodule', false);
    });
  });
})(); */

'use strict';

// Add a .current class to any link on the page the points to the current page
$(function () {
  /* $('a[href^="' + location.pathname.split("/")[1] + '"]').closest('li').addClass('current'); */
  var path = window.location.href;
  $('.hasSubNav > a').on('click', function (e) {
    e.preventDefault();
    e.stopPropagation();
  });
  $('[data-nav-primary] li[data-nav-primary-item] a:not([href="#"])').each(function () {
    if (this.href === path) {
      $(this).closest('li').addClass('active');
      $(this).closest('li[data-nav-primary-item]').addClass('active');
    }
  });
});

$(function () {
  $('.pagesubnav a:first-of-type').addClass('active');
  function removeActive() {
    $('[data-module="PageSubnav"] a').removeClass('active');
    $('[data-module="PageSubnav"] .accordion__panel').attr('aria-hidden', 'true');
    $('[data-module="PageSubnav"] .accordion__panel').attr('aria-expanded', 'false');
    $('[data-module="PageSubnav"] .accordion__header').removeClass('toggled');
    $('[data-module="PageSubnav"] .accordion__header').attr('aria-expanded', 'false');
  }
  $('[data-module="PageSubnav"] a').on('click', function () {
    $(this).addClass('active');
    removeActive();
  });
  $('a').on('click', function () {
    removeActive();
  });
  $('[data-module="ReferencesHPP"] .hppbody').show();
  $('[data-module="ReferencesHPP"] h5').addClass('active');
  $('[data-module="ReferencesHPP"] h5').on("click", function () {
    $(this).siblings('.hppbody').slideToggle();
    $(this).toggleClass('active');
  });

  // Break out specific image into svg markup to dynamically fill color
  jQuery(".anchoricon[src*='icon-video-play-button-white']").each(function () {
    var $img = jQuery(this);
    var imgID = $img.attr("id");
    var imgClass = $img.attr("class");
    var imgURL = $img.attr("src");

    jQuery.get(imgURL, function (data) {
      // Get the SVG tag, ignore the rest
      var $svg = jQuery(data).find("svg");

      // Add replaced image's ID to the new SVG
      if (typeof imgID !== "undefined") {
        $svg = $svg.attr("id", imgID);
      }
      // Add replaced image's classes to the new SVG
      if (typeof imgClass !== "undefined") {
        $svg = $svg.attr("class", imgClass + " replaced-svg");
      }

      // Remove any invalid XML tags as per http://validator.w3.org
      $svg = $svg.removeAttr("xmlns:a");

      // Check if the viewport is set, if the viewport is not set the SVG wont't scale.
      if (!$svg.attr("viewBox") && $svg.attr("height") && $svg.attr("width")) {
        $svg.attr("viewBox", "0 0 " + $svg.attr("height") + " " + $svg.attr("width"));
      }

      // Replace image with new SVG
      $img.replaceWith($svg);
    }, "xml");
  });
});

//Tabs Module
$(function () {
  var initialTarget = $('.tabnav .tab:first-of-type');
  initialTarget.addClass('active');
  $('.tabcontent').hide();
  $('.tabcontent:nth-of-type(1)').show();
  var clickTarget = $(".tabnav p.tab");
  if (window.innerWidth >= 1024) {
    var tabHeight = $('.tabcontent:nth-of-type(1)').outerHeight();
    $('.tabnav').css('min-height', tabHeight);
  } else {
    $('.tabnav').css('min-height', tabHeight);
  }
  window.addEventListener("resize", function () {
    if (window.innerWidth >= 1024) {
      var tabHeight = $('.tabcontent:nth-of-type(1)').outerHeight();
      $('.tabnav').css('min-height', tabHeight);
    } else {
      $('.tabnav').css('min-height', tabHeight);
    }
  });
  // Remove Opened State from the First Tab (execute only once)
  /* clickTarget.one('click', function(e) {
    initialTarget.data('status','not_clicked');
    initialTarget.removeClass('active');
    $(this).off(e);
  }) */
  clickTarget.on('click', function () {
    var tabCount = clickTarget.index(this);
    tabCount = tabCount + 1;
    if (window.innerWidth < 1024) {
      if ($(this).hasClass('active')) {
        $('.tabcontent').hide();
        $('.tabcontent:nth-of-type(' + tabCount + ')').hide();
        clickTarget.removeClass('active');
        $(this).removeClass('active');
      } else {
        $('.tabcontent').hide();
        $('.tabcontent:nth-of-type(' + tabCount + ')').show();
        clickTarget.removeClass('active');
        $(this).addClass('active');
      }
    }
    if (window.innerWidth >= 1024) {
      $('.tabnav .tab').removeClass('active');
      $('.tabcontent').hide();
      $('.tabcontent:nth-of-type(' + tabCount + ')').show();
      $(this).addClass('active');
      var tabHeight = $('.tabcontent:nth-of-type(' + tabCount + ')').outerHeight();
      $('.tabnav').css('min-height', tabHeight);
    } else {
      $('.tabnav').css('min-height', "auto");
    }
    window.addEventListener("resize", function () {
      if (window.innerWidth >= 1024) {
        var tabHeight = $('.tabcontent:nth-of-type(' + tabCount + ')').outerHeight();
        $('.tabnav').css('height', tabHeight);
      } else {
        $('.tabnav').css('height', "auto");
      }
    });
  });
});

// Image Zoom
$(function () {
  function imgZoom(selector) {
    $(selector).each(function () {
      var $this = $(this);
      var zoomSrc = $this.data('zoomsrc');
      if (!zoomSrc) {
        var $img = $this.find("img");
        $img.closest('div').addClass('imgzoom');
        var mysrcset = $img.attr('data-srcset');
        var lastsrcset = mysrcset.split(',');
        var lastsrc = lastsrcset[lastsrcset.length - 1];
        var lastsrcRemove = lastsrc.replace("2560w", ""); // TODO: Make variable
        zoomSrc = lastsrcRemove; // srcset Path
        $this.data('zoomsrc', zoomSrc);
      }
      var zoomImg = document.createElement('img');
      zoomImg.src = zoomSrc;
      zoomImg.addEventListener("load", function () {
        var zoomWidth = zoomImg.naturalWidth;
        var zoomHeight = zoomImg.naturalHeight;
        $this.data('zoomwidth', zoomWidth);
        $this.data('zoomheight', zoomHeight);
      }, false);
    });
    $(selector).on("click", function () {
      var $this = $(this);
      var pswpElement = document.querySelectorAll('.pswp')[0];
      var items = [{
        src: $this.data("zoomsrc"),
        w: $this.data("zoomwidth") * 2,
        h: $this.data("zoomheight") * 2
      }];

      // define options (if needed)
      var options = {
        // optionName: 'option value'
        index: 0,
        maxSpreadZoom: 5
      };

      // Initializes and opens PhotoSwipe
      var gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);
      gallery.init();
    });
  }
  if (window.innerWidth <= 1023) {
    //TODO: Figure out why setTimeout is working but DOMContentLoaded isn't
    setTimeout(function () {
      imgZoom('#children picture');
    }, 500);
    setTimeout(function () {
      imgZoom('#studiedinallages picture');
    }, 500);
    setTimeout(function () {
      imgZoom('#adolescentsandadults picture');
    }, 500);
    setTimeout(function () {
      imgZoom('#journeytreatment picture');
    }, 500);
    setTimeout(function () {
      imgZoom('#journey_prescription picture');
    }, 500);
  }
  window.addEventListener("resize", function () {
    if (window.innerWidth <= 1023) {
      imgZoom('#children picture');
      imgZoom('#studiedinallages picture');
      imgZoom('#adolescentsandadults picture');
      imgZoom('#journeytreatment picture');
      imgZoom('#journey_prescription picture');
    }
  });
});

// PDF links in new tab
(function () {
  $(document).ready(function () {
    $('a[href$=".pdf"]').attr('target', '_blank');
    $('a[href*="/Documents/"]').attr('target', '_blank');
    //Open /important-safety-information link in a new tab
    $('a[href$="/important-safety-information"]').attr('target', '_blank');
  });
  $(document).ready(function () {
    $('.skeletonmodal div').hide();
    $('.spancallout').on('click', function () {
      var itemclick = $(this).index();
      var itemclicknumber = itemclick + 1;
      $('.skeletonarea').addClass('active');
      $('.skeletonmodal').addClass('active');
      $('.skeletonmodal div').hide();
      $('.skeletonmodal div:nth-of-type(' + itemclicknumber + ')').show();
    });
    $('.skeletonmodal legend').on('click', function () {
      $('.skeletonarea').removeClass('active');
      $('.skeletonmodal').removeClass('active');
    });
  });
})();

// Play animation on scroll
(function () {
  $(document).ready(function () {
    // Numbers
    var isIE11 = !!window.MSInputMethodContext && !!document.documentMode;
    if (!isIE11) {
      if ($('[data-module="Numbers"]')) {
        $('[data-module="Numbers"]').each(function () {
          var $numbersCntr = $(this);
          var $numbersSelect = $numbersCntr.find('.numberwheel .mask.full');
          var $numbersInnerSelect = $numbersCntr.find('.numberwheel .mask > .fill');
          // var getClass = $numbersSelect.attr('class');
          // var getInnerClass = $numbersInnerSelect.attr('class');
          // var $numbersScroll = $(this).offset().top - 180;
          // $numbersSelect.removeClass(getClass);
          // $numbersInnerSelect.removeClass(getInnerClass);
          $(window).scroll(function () {
            if ($(window).scrollTop() >= $numbersScroll) {
              $numbersSelect.addClass(getClass);
              $numbersInnerSelect.addClass(getInnerClass);
            }
          });
        });
      }
    }
    // SVG
    if ($('section:not(\'[data-module="HeroModule"]\') img[data-srcset*=".svg"]')) {
      $('section:not(\'[data-module="HeroModule"]\') img[data-srcset*=".svg"]').each(function () {
        var $svgSelect = $(this);
        var windowHeight = $(window).height() / 2;
        var $svgScroll = $(this).offset().top - windowHeight;
        var flag = false;
        $(window).scroll(function () {
          if ($(window).scrollTop() >= $svgScroll) {
            if (!flag) {
              var srcSet = $svgSelect.attr('data-srcset');
              $svgSelect.attr('srcset', srcSet);
              flag = true;
            }
          }
        });
      });
    }
  });
})();

// Wrap Advocacy Icon Panels in a tags
(function () {
  $(document).ready(function () {
    if ($('[data-module="AdvocacyModule"]')) {
      $('[data-module="AdvocacyModule"]').next('[data-grid]').each(function () {
        $(this).find('.contentinner a').each(function () {
          var link = $(this).attr('href');
          $(this).closest('.contentinner').wrap('<a href="' + link + '"></a>');
        });
      });
      $('[data-module="AdvocacyModule"]').next('[data-grid] + [data-grid]').each(function () {
        $(this).find('.contentinner a').each(function () {
          var link = $(this).attr('href');
          $(this).closest('.contentinner').wrap('<a href="' + link + '"></a>');
        });
      });
    }
  });
})();

// Wrap SVGs in Object Tag
/* $(function () {
  $(document).ready(function () {
    if ($('.HeroCalloutImage img[data-srcset*="svg"]')) {
      var $imgTarget = $('.HeroCalloutImage img[data-srcset*="svg"]');
      var mysrcset = $imgTarget.attr('data-srcset');
      var lastsrcset = mysrcset.split(',');
      var lastsrc = lastsrcset[lastsrcset.length - 1];
      var lastsrcRemove = lastsrc.replace("2560w", ""); // TODO: Make variable
      var zoomSrc = lastsrcRemove; // srcset Path
      $imgTarget.data('zoomsrc', zoomSrc);
      var svgSrc = $imgTarget.attr('srcset');
      $imgTarget.wrap('<object type="image/svg+xml" data="' + svgSrc + '"></object>');
    }
  });
}); */

$(function () {
  $(document).ready(function () {
    var isIE11 = !!window.MSInputMethodContext && !!document.documentMode;
    if (isIE11) {
      var $chartImg = $('img[data-srcset*="chartmissingalp"]');
      var $replacesImg = $('img[data-srcset*="chartstqreplaces"]');
      $chartImg.closest('picture').html('<img src="/-/media/Strensiq_Patient_com/Images/static/chartmissingalp-static.svg">');
      $replacesImg.closest('picture').html('<img src="/-/media/Strensiq_Patient_com/Images/static/21stq3339chartstqreplaces-static.svg">');
    }
  });
});
'use strict';

$(function () {
  $(document).ready(function () {

    $('#StayConnected .checkbox :input').prop("checked", false);
    $('#StayConnected .checkbox').first().hide();
    $('.field-validation-error').last().hide();
    if ($("#StayConnected .form-group > select").length) {
      $("#StayConnected .form-group > select").closest("#StayConnected .form-group").addClass('select-wrap');
      $("#StayConnected .form-group > select").find('option:first-of-type').html('Select one');
      $("#StayConnected .form-group > select").find('option:first-of-type').attr('disabled', true);
    }
    /* if($("#StayConnected .form-group > .checkbox").length){
      $("#StayConnected .form-group > .checkbox").closest("#StayConnected .form-group").addClass('checkbox');
    } */

    /* // Front End Checkbox Validation
    var $checkboxValid = $('#StayConnected input[type="checkbox"]');
    var $submitBtn = $('#StayConnected .form-submit-border .btn');
    $submitBtn.prop("disabled", true);
    $checkboxValid.on("click", function(){
      if($(this).is(":checked")){
        $submitBtn.removeAttr("disabled");
      }
      else if($checkboxValid.is(":not(:checked)")){
        $submitBtn.prop("disabled", true);
      }
    }); */
    // Front End Checkbox Validation
    var $checkboxValid = $('#StayConnected input[type="checkbox"]');
    var $submitBtn = $('#StayConnected .form-submit-border .btn');
    //$submitBtn.prop("disabled", true);
    $checkboxValid.on("click", function () {
      if ($(this).is(":checked")) {
        //$submitBtn.removeAttr("disabled");
        $('.checkbox :input').prop("checked", true);
      } else if ($checkboxValid.is(":not(:checked)")) {
        //$submitBtn.prop("disabled", true);
        $('.checkbox :input').prop("checked", false);
      }
    });

    // Extra Validation
    $('#StayConnected .required-field:nth-of-type(1) input, #StayConnected .required-field:nth-of-type(2) input').on('keypress', function (event) {
      var regex = new RegExp("^[a-zA-Z0-9\\-]*$");
      var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
      if (!regex.test(key)) {
        event.preventDefault();
        return false;
      }
    });

    // Display Success Message
    var $checkboxValid = $('#StayConnected input[type="checkbox"]');
    var $stayConnectedForm = $('#StayConnected .l-col > form');
    $stayConnectedForm.on("submit", function (e) {
      $(".invalidspan").removeClass("field-validation-error");
      $(".checkbox.form-group").removeClass("checkbox--invalid");
      if ($checkboxValid.is(":not(:checked)")) {
        $(".checkbox.form-group").addClass("checkbox--invalid");
        e.preventDefault();
      }
      if ($("#StayConnected .input-validation-error").length) {
        $(".invalidspan").addClass("field-validation-error");
        $(".checkbox.form-group").addClass("checkbox--invalid");
      } else {
        setTimeout(function () {
          $('html, body').animate({ scrollTop: $('#StayConnected').offset().top - 150 }, 1000);
          $('#StayConnected form form').hide();
          $('#StayConnected form form').parent('form').append('<div style="text-align: center; width: 100%;"><h2 style="width: 100%; display: block;">Thank you!</h2><p style="width: 100%; display: block;">We will be in touch soon.</p>');
        }, 500);
      }
    });
  });
});

window.dataLayer = window.dataLayer || [];

$(document).on('submit', '[data-wffm]', function (e) {
  if (!window.dataLayer) return false;

  var eventName = 'stayConnectedSubmit'; //window.location.href.split("/").pop()+ " Submit";
  var $selects = $(this).find('select');
  var obj = {};
  obj.event = eventName;
  $selects.each(function (index, item) {
    var $select = $(item);
    var $label = $select.closest('div').find('label');
    var key = $label.html();
    var value = $select.val();
    obj[key] = value;
  });
  window.dataLayer.push(obj);
});

// Home survey question
$(function () {
  var siteNavHeight = $('.SiteNav').outerHeight();
  var question = 1;
  $('.questionshowing').hide();
  $('.finalframe').hide();
  $('.disclaimer').hide();
  setTimeout(function () {
    $('.btn--begin').attr('disabled', true);
  }, 100);
  $('.intro > .form-group--radio *').click(function () {
    if ($(".intro > .form-group--radio input").is(':checked')) {
      $('.btn--begin').attr('disabled', false);
    }
  });
  $('.btn--begin').on('click', function (e) {
    e.preventDefault();
    $('.questionscntr .intro').hide();
    $('.questionshowing').fadeIn();
    $('.question').hide();
    $('.question:nth-of-type(1)').fadeIn();
    $('.question:nth-of-type(1)').addClass('active');
    $('.disclaimer').fadeIn();
    if (window.innerWidth >= 1024) {
      var page = $('html, body');
      page.animate({
        scrollTop: $('#questionstop').offset().top
      }, 1000);
    }
    if (window.innerWidth <= 1023) {
      $('html, body').animate({
        scrollTop: $('#questionstop').offset().top - siteNavHeight
      }, 1000);
    }
  });
  $('.btn--nextquestion').on('click', function (e) {
    e.preventDefault();
    if (!$(".question.active input:checked").length) {
      e.preventDefault();
      /* $('.btn--nextquestion').attr("disabled", true); */
    } else {
      if (window.innerWidth >= 1024) {
        var page = $('html, body');
        page.animate({
          scrollTop: $('#questionstop').offset().top
        }, 1000);
        setTimeout(function () {
          $('.SiteNav').addClass('hidebar');
        }, 0);
      }
      if (window.innerWidth <= 1023) {
        $('html, body').animate({
          scrollTop: $('#questionstop').offset().top - 90
        }, 1000);
      }
      $('.btn--nextquestion').attr("disabled", false);
      $('.question').removeClass('form-group--invalid');
      question = question + 1;
      if (question < 5) {
        $('.question').hide();
        $('.question').removeClass('active');
        $('.question:nth-of-type(' + question + ')').fadeIn();
        $('.question:nth-of-type(' + question + ')').addClass('active');
      } else {
        $('.btnarea').hide();
        $('.question').hide();
        $('.finalframe').fadeIn();
      }
      if (question === 4) {
        $('.btnarea .btn').html('FINISH');
      } else {
        $('.btnarea .btn').html('NEXT');
      }
    }
  });
  $('.btn--startover').on('click', function (e) {
    e.preventDefault();
    $('.btnarea').fadeIn();
    question = 1;
    $('.questionscntr').trigger("reset");
    $('.intro').fadeIn();
    $('.question').removeClass('active');
    $('.questionshowing').hide();
    $('.finalframe').hide();
    $('.disclaimer').hide();
    $('html, body').animate({
      scrollTop: $('#questionstop').offset().top
    }, 1000);
  });
  $('.btn--print').on('click', function (e) {
    e.preventDefault();
    var $form = $(this).closest('form'),
      target = $form.attr('target');
    $form.attr('target', '_blank').submit().attr('target', target);
    $('.btnarea').fadeIn();
    question = 1;
    $('.questionscntr').trigger("reset");
    $('.intro').fadeIn();
    $('.question').removeClass('active');
    $('.questionshowing').hide();
    $('.finalframe').hide();
    $('.disclaimer').hide();
    $('html, body').animate({
      scrollTop: $('#questionstop').offset().top
    }, 1000);
  });
});
'use strict';

// TODO : Strip out $

(function ($) {
  "use strict";

  var ISI = {

    // When Jumping to the ISI 
    // What offset do we neeed to account for (typically nav)
    jumpOffset: 100,

    setState: function setState(state) {
      switch (state) {
        case 'collapsed':
          this.DOM.sticky.removeClass(this.stickyOpen);
          this.DOM.sticky.addClass('isi-sticky--collapsed');
          break;
        case 'expanded':
          this.DOM.sticky.removeClass('isi-sticky--collapsed');
          this.DOM.sticky.addClass(this.stickyOpen);

          break;
        case 'hidden':
          if (this.DOM.sticky.hasClass('isi-sticky--full') === false) this.DOM.sticky.addClass('isi-sticky--hidden');
          break;
        case 'visible':
          if (this.DOM.sticky.hasClass('isi-sticky--full') === false) this.DOM.sticky.removeClass('isi-sticky--hidden');
          break;
        case 'full':
          this.DOM.sticky.toggleClass('isi-sticky--full');
          break;
        case 'jump':
          $('html, body').animate({ scrollTop: this.DOM.root.offset().top - this.jumpOffset }, 550);
          break;
      }
    },
    bindings: function bindings() {
      $('[data-isi-jump]').click($.proxy(function (e) {
        e.preventDefault();
        this.setState('jump');
      }, this));

      $('[data-isi-full]').click($.proxy(function (e) {
        e.preventDefault();
        if ($('html').hasClass('u-lockPage')) {
          $('html').removeClass('u-lockPage');
        } else {
          $('html').addClass('u-lockPage');
        }
        this.setState('full');
      }, this));

      // $('[data-isi-collapse]').click($.proxy(function(e){
      //   e.preventDefault();
      //   this.setState('collapsed');
      // },this));

      $('[data-isi-expand]').click($.proxy(function (e) {
        e.preventDefault();
        this.setState('expanded');
      }, this));

      this.DOM.scrollTarget.scroll($.proxy(function () {
        var scrollY = window.scrollY;
        var endSticky = 40;
        /* if ( $("body").hasClass("Page-STRENSIQ_HCP_COM") ||  $("body").hasClass("Page-home") ) {
      endSticky = 220
    } */
        //if (scrollY > 0) { this.setState('collapsed'); } 
        // OLD CODE
        /* if (window.core.fn.isInViewport(this.DOM.inPage[0], endSticky) || window.core.fn.isInViewport(this.DOM.footer[0])) {
          this.setState('hidden');
        } else {
          this.setState('visible');
        } */
        // NEW CODE
        // Using intersection observer to check if element is in viewport (https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)
        const options = {
          root: null,
          rootMargin: '10px',
          threshold: 0
        }

        // TODO: ISI section is visible in mobile when scroll Y is full
        const observer = new IntersectionObserver(function (entries, observer) {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              // console.log('in viewport')
              ISI.setState('hidden');
            } else {
              // console.log('not in viewport')
              ISI.setState('visible');
            }
          })
        }, options)
        observer.observe(this.DOM.inPage[0])
      }, this));
    },
    init: function init() {
      // Sniff the DOM in init
      // when we know it is ready.
      this.DOM = {
        scrollTarget: $(window),
        root: $('.isi'),
        sticky: $('.isi-sticky'),
        inPage: $('.isi-inPage'),
        footer: $('.SiteFooter')
      };

      // When the sticky is open, what class do we want to apply
      this.stickyOpen = this.DOM.sticky.attr('data-isi-openclass') || 'isi-sticky--quarter';

      // Ready to roll, lets bind
      if (this.DOM.root.length) {
        this.bindings();
      }
    }
  };

  document.addEventListener("DOMContentLoaded", function () {
    ISI.init();
    $('body.Page-STRENSIQ_PATIENT_COM .isi-sticky:not(.isi-sticky--full)').addClass('isi-fullHome');
    $('.isi-fullHome').on('click', function () {
      $(this).removeClass('.isi-fullHome');
    });
    $(window).scroll(function () {
      $('body.Page-STRENSIQ_PATIENT_COM .isi-sticky:not(.isi-sticky--full)').removeClass('isi-fullHome');
    });
  });
})($);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  "use strict";

  var util = {
    trigger: function trigger(name, data) {
      document.dispatchEvent(new CustomEvent(name, data));
    }
  };

  var Events = {
    HIDE: 'hide.core.modal',
    SHOW: 'show.core.modal',
    DISMISS_CLICK: 'dismiss.click.core.modal',
    DISMISS_KEY: 'dismiss.key.core.modal',
    FOCUS: 'focus.core.modal'
  };

  var ClassName = {
    BACKDROP: 'modal-backdrop',
    FADE: 'fade',
    OPEN: 'is-visible',
    ACTIVE_HTML: 'modal-open'
  };

  var DOM = {
    html: $('html'),
    document: $(document)
  };

  var DataAPI = {
    OPEN: '[data-modal-open]',
    CLOSE: '[data-modal-close]'
  };

  var Modal = function () {
    function Modal(element, config) {
      _classCallCheck(this, Modal);

      this._element = element;
      this._config = config;
      this.id = element.dataset.modalId;

      var keyboardListener = function keyboardListener(event) {
        console.log("keydown:", event.keyCode, this);
      };
      this._element.addEventListener('onkeyup', keyboardListener);
    }

    _createClass(Modal, [{
      key: 'toggleBackdrop',
      value: function toggleBackdrop() {
        var bd = document.getElementsByClassName('modal-backdrop')[0];
        if (bd.classList.contains(ClassName.OPEN)) {
          bd.classList.add(ClassName.FADE);
          setTimeout(function () {
            bd.classList.remove(ClassName.OPEN);
          }, 250);
        } else {
          bd.classList.add(ClassName.OPEN);
          setTimeout(function () {
            bd.classList.remove(ClassName.FADE);
          }, 1);
        }
        return;
      }
    }, {
      key: 'show',
      value: function show(target) {
        // show the modal
        this._element.style.display = 'block';
        this._element.setAttribute('aria-hidden', false);

        // Transitioning to block we need to wait a beat to get our animations to flow
        window.setTimeout(function () {
          this._element.classList.add(ClassName.OPEN);
        }.bind(this), 1);

        // show the backdrop
        this.toggleBackdrop();

        // get the current position.
        var currentPosition = window.pageYOffset;
        // Lock the page
        document.querySelectorAll('html')[0].classList.add(ClassName.ACTIVE_HTML);
        // after locking - scroll back to where we were.
        window.setTimeout(function () {
          window.scroll(0, currentPosition);
        }, 500);

        // Dispatch Event
        util.trigger(Events.SHOW, { detail: { target: target } });
      }
    }, {
      key: 'hide',
      value: function hide(target) {
        this._element.classList.remove('is-visible');

        window.setTimeout(function () {
          this.toggleBackdrop();
          this._element.style.display = 'none';
          this._element.setAttribute('aria-hidden', true);
          document.querySelectorAll('html')[0].classList.remove(ClassName.ACTIVE_HTML);
          util.trigger(Events.HIDE, { detail: { target: target } });
        }.bind(this), 500);
      }
    }]);

    return Modal;
  }();

  DOM.document.on('click', DataAPI.OPEN, function (e) {
    e.preventDefault();
    // Get the Target
    var targetModal = this.dataset.modalTarget;
    // Find the Target
    var element = document.querySelectorAll('[data-modal-id="' + targetModal + '"]')[0];
    // Instanciate the Target as a Modal
    var myModal = new Modal(element, {});
    // Show it.
    myModal.show(e.target);

    window.currentModal = myModal;
  });

  DOM.document.on('click', DataAPI.CLOSE, function (e) {
    e.preventDefault();
    // Get the target
    if (window.currentModal) {
      window.currentModal.hide(e.target);
      window.currentModal = null;
    }
  });

  // Special Consideration for Video Modals
  document.addEventListener(Events.SHOW, function (e) {
    var targetId = $(e.detail.target).closest('[data-modal-target]');
    var modal = $('[data-modal-id="' + targetId.data('modalTarget') + '"]');
    if (modal) {
      var targetVideo = $(modal).find('video')[0];
      if (targetVideo) {
        window.setTimeout(function () {
          targetVideo.setAttribute('controls', '');
          if ($(modal).hasClass('modal--video')) {
            targetVideo.play();
          }
        }, 500);
      }
    }
  });

  document.addEventListener(Events.HIDE, function (e) {
    var targetId = $(e.detail.target).closest('[data-modal-id]');
    var targetVideo = $(targetId).find('video')[0];
    if (targetVideo && !targetVideo.ended) {
      targetVideo.pause();
      targetVideo.load();
    }
  });

  window.Modal = Modal;
})();
$(function () {
  function attachModal(selector) {
    $(selector).on('click', function (e) {
      var $this = $(this);
      var thisHref = $this.attr('href');
      e.preventDefault();
      if (!window.exitModal) {
        var element = document.querySelectorAll('[data-modal-id="exitModal"]')[0];
        window.exitModal = new window.Modal(element, {});
      }
      window.exitModal.show(null);
      window.currentModal = window.exitModal;
      $('.continue-button').attr({
        'href': thisHref,
        'target': '_blank'
      });
      $('.continue-button').on('click', function () {
        if (window.currentModal) {
          window.currentModal.hide(e.target);
          window.currentModal = null;
        }
      });
    });
  }
  // attachModal('a.bg-warning');
  // attachModal('a[href^="http"]:not(.modal-body a[href^="http"]):not(a[href*="https://alexion.com/documents/strensiq_uspi.pdf"]):not(.SiteFooter a[href^="http"])');
  // //Exception for modal: Show modal ONLY in case that the target in the Footer is alexionhppevents.com
  // attachModal('.SiteFooter a[href*="alexionhppevents.com"]');
  $('.modal-body a[href^="http"]').attr({
    'target': '_blank'
  });
});
'use strict';

(function ($) {

  // Subnav focus
  $(function () {
    $(window).keyup(function (e) {
      var code = e.keyCode ? e.keyCode : e.which;
      if (code == 9 && $('.hasSubNav a').length) {
        $('.hasSubNav li a').on('focusin', function (e) {
          $(this).parents(".hasSubNav").addClass("focused");
        });
        $('.hasSubNav li a').on('focusout', function (e) {
          $(this).parents(".hasSubNav").removeClass("focused");
        });
      }
    });
  });

  /**
  * View Height Reclacultor for Mobile Devices
  */
  (function () {
    "use strict";

    document.addEventListener("DOMContentLoaded", function () {
      // First we get the viewport height and we multiple it by 1% to get a value for a vh unit
      var vh = window.innerHeight * 0.01;
      // Then we set the value in the --vh custom property to the root of the document
      document.documentElement.style.setProperty('--vh', vh + 'px');

      // We listen to the resize event
      window.addEventListener('resize', function () {
        // We execute the same script as before
        var vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', vh + 'px');
      });
    });
  })();
  var prevScrollpos = 0;
  var maxScrollpos = 0;
  window.addEventListener("scroll", function () {
    var currentScrollPos = window.pageYOffset;
    var direction = currentScrollPos - prevScrollpos;
    if (direction > 0 && currentScrollPos > 60) {
      $('.SiteNav').addClass('hidebar');
      $('.SiteNav').addClass('whitebg');
    } else if (direction < 0 && currentScrollPos < 60) {
      $('.SiteNav').removeClass('whitebg');
    }
    if (direction < 0 && maxScrollpos - currentScrollPos > 10) {
      $('.SiteNav').removeClass('hidebar');
    } else {
      maxScrollpos = currentScrollPos > maxScrollpos ? currentScrollPos : maxScrollpos;
      if (prevScrollpos < 10) {
        $('.SiteNav').removeClass('hidebar');
        maxScrollpos = 0;
      }
    }
    prevScrollpos = currentScrollPos;
  });

  $(document).on('click', '.hamburger', function (e) {
    e.preventDefault();
    $('html').toggleClass('menuOpen');
    $('.hamburger').toggleClass('open');
    $('.list-nav-container').toggleClass('open');
  });

  // Nav Offset Function
  var $fixedHeight = '';
  function navOffset() {
    var $navClass = $(".fixednav");
    var $navHeight = $(".SiteNav-wrap").outerHeight(); // Get height of navbar
    if ($navClass.length > 0) {
      // Combine heights of nav and cookie
      var applyOffsetPadding = function applyOffsetPadding() {
        $(".HeroCalloutCntr").css('padding-top', $fixedHeight + 50);
        $("section[data-module='StayConnected']").css('padding-top', $fixedHeight + 50);
        $(".pushdown").css('padding-top', $fixedHeight);
        $(".homeHero").css('padding-top', $navHeight + 110);
        if (window.innerWidth < 1024) {
          $(".HeroCalloutCntr").css('padding-top', $fixedHeight + 30);
          $(".homeHero").css('padding-top', $fixedHeight + 30);
          $(".pushdown").css('padding-top', $fixedHeight + 30);
        }
      };

      // Only works if fixedtop class is applied to parent nav div
      if ($('body').hasClass('withCookie')) {
        // Get height of cookie
        // Bring mobile menu to top, if cookies are active. Set to zero if closed.
        var cookieOffset = function cookieOffset() {
          $('.SiteNav .list-nav-container').css('top', 0);
          $('[data-cookie="close"]').on('click', function () {
            $('.SiteNav .list-nav-container').css('top', 0);
          });
        };

        // Check if cookie is visible
        var $cookieHeight = $(".cookieContainer").outerHeight();
        if (window.innerWidth < 1024) {
          cookieOffset();
          $(window).resize(function () {
            cookieOffset();
          });
        }
      } else {
        var $cookieHeight = 0;
      }
      if ($('body').hasClass('withBanner')) {
        // Get height of banner
        var bannerOffset = function bannerOffset() {
          $('.SiteNav .list-nav-container').css('top', -$bannerHeight);
          if ($('body').hasClass('withCookie')) {
            var $cookieHeight = $(".cookieContainer").outerHeight(); // Get height of cookie
            $('.SiteNav .list-nav-container').css('top', -($cookieHeight + $bannerHeight));
          }
        };

        // Check if banner is visible
        var $bannerHeight = $(".announcementbanner").outerHeight();
        if (window.innerWidth < 1024) {
          bannerOffset();
          $(window).resize(function () {
            bannerOffset();
          });
        }
      } else {
        var $bannerHeight = 0;
      }
      var $navHeight = $(".SiteNav-wrap").outerHeight(); // Get height of navbar
      $fixedHeight = $navHeight + $cookieHeight + $bannerHeight;
      applyOffsetPadding();
      $(window).resize(function () {
        applyOffsetPadding();
      });
      return $fixedHeight;
    }
  }
  navOffset();

  // Fire on Page Load
  $(document).ready(function () {
    navOffset();
    var isIE11 = !!window.MSInputMethodContext && !!document.documentMode;
    var $cookieHeight = $(".cookieContainer").outerHeight();
    var $navHeight = $(".site-header").outerHeight();
    // Fire on Cookie Closing
    $('[data-cookie="close"]').on('click', function () {
      navOffset();
    });
    window.addEventListener("scroll", function () {
      if ($('nav').hasClass('hidebar')) {
        $fixedHeight = 0;
      } else {
        $fixedHeight = $navHeight + $cookieHeight;
      }
    });
    $('.isi-stickyHeader.isi-header').on('click', function () {
      if ($('.isi-sticky').hasClass('isi-sticky--full')) {
        if (isIE11) {
          $(".isi-sticky").css('height', 'calc(100vh - ' + $fixedHeight + 'px)');
        } else {
          $fixedHeight = $('.site-header').outerHeight();
          $(".isi-sticky").css('height', 'calc(calc(var(--vh, 1vh) * 100) - ' + $fixedHeight + 'px)');
        }
      } else {
        $(".isi-sticky").css('height', '76px');
      }
    });
  });

  // Fire on Browser Resize
  $(window).resize(function () {
    navOffset();
  });
})(jQuery);
'use strict';

// https://www.w3schools.com/howto/howto_js_image_comparison.asp


function initComparisons() {
  var x, i, revealblock;
  /* Find all elements with an "overlay" class: */
  x = document.getElementsByClassName("revealimage2");
  for (i = 0; i < x.length; i++) {
    /* Once for each "overlay" element:
    pass the "overlay" element as a parameter when executing the compareImages function: */
    compareImages(x[i]);
  }
  function compareImages(img) {
    var wasSlid = false;
    var slider,
      img,
      clicked = 0,
      w,
      h;
    /* Get the width and height of the img element */
    function getWAndH() {
      w = img.offsetWidth;
      h = img.offsetHeight;
      $('.revealblock').css('height', h);
      $('.revealblock > .revealimage, .revealblock img').css('height', h);
    }
    function updateW() {
      var fullWidth = document.getElementsByClassName("revealimage1")[0];
      w = fullWidth.offsetWidth;
    }
    getWAndH();
    $(function () {
      $(window).resize(function () {
        getWAndH();
      });
    });
    /* Create slider: */
    slider = document.createElement("DIV");
    slider.setAttribute("class", "revealimage-slider");
    var executed = false;
    var offset = parseInt($('.revealimage').offset().top);
    var bheight = $(window).height();
    var percent = 0.6;
    var hpercent = bheight * percent;
    setTimeout(function () {
      $('.revealimage-slider').addClass('pulse');
    }, 500);
    function pulseRemove() {
      $('.revealimage-slider').removeClass('pulse');
    }
    /* $(window).scroll(function () {
        if ($(window).scrollTop() >= (offset - hpercent) ) {
            if (!executed) {
                setTimeout(function(){
                    $('.revealimage2').addClass('grow');
                    $('.revealimage-slider').addClass('grow');
                    $('.slidertext span').addClass('fadeIn');
                },500);
                setTimeout(function(){
                    $('.revealimage2').removeClass('grow');
                    $('.revealimage-slider').removeClass('grow');
                    img.style.width = 100 + "%";
                    slider.style.left = "calc(100% - 20px)";
                    if (window.innerWidth <= 767) {
                        img.style.width = "calc(100% - 30px)";
                        slider.style.left = "calc(100% - 50px)";
                    }
                },2000);
                executed = true;
            }
        }
    }); */
    /* Set the width of the img element to 50%: */
    img.style.width = "70px";
    /* Insert slider */
    img.parentElement.insertBefore(slider, img);
    /* Position the slider in the middle: */
    slider.style.top = h / 2 - slider.offsetHeight / 2 + "px";
    slider.style.left = "50px";
    function mobileSettings() {
      if (window.innerWidth <= 1023) {
        img.style.width = "50px";
        slider.style.left = "30px";
      }
    }
    mobileSettings();
    $(window).resize(function () {
      mobileSettings();
    });
    /* Execute a function when the mouse button is pressed: */
    slider.addEventListener("mousedown", slideReady);
    /* And another function when the mouse button is released: */
    window.addEventListener("mouseup", slideFinish);
    /* Or touched (for touch screens: */
    slider.addEventListener("touchstart", slideReady);
    /* And released (for touch screens: */
    window.addEventListener("touchend", slideFinish);
    function slideReady(e) {
      /* Prevent any other actions that may occur when moving over the image: */
      e.preventDefault();
      /* The slider is now clicked and ready to move: */
      clicked = 1;
      /* Execute a function when the slider is moved: */
      window.addEventListener("mousemove", slideMove);
      window.addEventListener("touchmove", slideMove);
      window.addEventListener("mousemove", pulseRemove);
      window.addEventListener("touchmove", pulseRemove);
    }
    function slideFinish() {
      /* The slider is no longer clicked: */
      clicked = 0;
    }
    function slideMove(e) {
      if (!wasSlid) {
        updateW();
        wasSlid = true;
      }
      var pos;
      /* If the slider is no longer clicked, exit this function: */
      if (clicked == 0) return false;
      /* Get the cursor's x position: */
      pos = getCursorPos(e);
      /* Prevent the slider from being positioned outside the image: */
      if (pos < 0) pos = 0;
      if (pos > w) pos = w;
      /* Execute a function that will resize the overlay image according to the cursor: */
      slide(pos);
    }
    function getCursorPos(e) {
      var a,
        x = 0;
      e = e || window.event;
      /* Get the x positions of the image: */
      a = img.getBoundingClientRect();
      /* Calculate the cursor's x coordinate, relative to the image: */
      x = e.pageX - a.left;
      /* Consider any page scrolling: */
      x = x - window.pageXOffset;
      return x;
    }
    function slide(x) {
      /* Resize the image: */
      img.style.width = x + "px";
      /* Position the slider: */
      slider.style.left = img.offsetWidth - slider.offsetWidth / 2 + "px";
    }
  }
}
// TODO: Figure out why DOMContentLoaded doesn't work here, and setTimeout does
$(window).on('load', function () {
  initComparisons();
});
/* window.sliderLoaded = false;
document.addEventListener('lazybeforeunveil', function() {
    var slider = document.getElementById('sliderimage');
    if (slider && !window.sliderLoaded) {
        initComparisons();
        window.sliderLoaded = true;
    }
}) */
"use strict";

// Stay Connected Anchor
$(function () {
  // Set initial value
  var offsetValue = 0;
  var offsetFunction = function offsetFunction() {
    // Change value if on desktop size
    if (window.innerWidth >= 1024) {
      offsetValue = 100;
      if ($('body').hasClass("withCookie")) {
        offsetValue = 150;
      }
    }
  };
  // Change value on load & resize
  offsetFunction();
  window.addEventListener("resize", function () {
    offsetFunction();
  });
  window.addEventListener("scroll", function () {
    offsetFunction();
  });

  // Page Subnav Scroll Functions
  var $subNav = $('.pagesubnav');
  var $stickPoint = $('.pagesubnav > .pagesubnavstickpoint');

  // Link hero image to first subnav
  var firstHref = $('.jumpbtn').attr('href');
  $('.HeroCalloutImage').append('<a style="display: block; position: absolute;width: 100%;height: 100%;z-index: 5;top: 0px;left: 0px;" href="' + firstHref + '"></a>');
  $('a').not('[href="#"]').not('[href="#0"]').not('.Page-STRENSIQ_PATIENT_COM .jumpbutton a').on("click", function (e) {
    function offsetSubnav() {
      offsetValue = 130;
      if ($('body').hasClass("withCookie")) {
        offsetValue = 180;
      }
      if (window.innerWidth <= 1023) {
        var $subnavpoint = 56;
        offsetValue = $subnavpoint;
        if ($('.pagesubnavstickpoint.scrolled')) {
          $subnavpoint = $('.pagesubnavstickpoint.scrolled').outerHeight() + 10;
        }
      }
    }
    offsetSubnav();
    window.addEventListener("resize", function () {
      offsetSubnav();
    });
    if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
      // Figure out element to scroll to
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      if (target.length) {
        if (target[0].id === 'ISI') {
          offsetValue = 0;
        }
        e.preventDefault();
        $('html, body').animate({
          scrollTop: target.offset().top - offsetValue
        }, 1000);
      }
    }
  });

  // Delay to get Waypoints.js loaded
  function subNavFunction() {
    // Loop through all of the links within the class
    $('.pagesubnavcntr .js-accordion__panel a').each(function () {
      // Each link stored in variable
      var href = $(this).attr('href');
      var inViewScroll = inView();
      var windowHeight = $(window).height() / 2;
      var subnavHeight = $('[data-module="PageSubnav"]').outerHeight();
      if (window.innerWidth <= 1023) {
        $('[data-module="PageSubnav"]').css({
          'min-height': subnavHeight,
          'transition': '.3s ease all'
        });
      }
      inViewScroll.offset({
        top: windowHeight,
        left: 0,
        right: 0,
        bottom: windowHeight
      });
      inViewScroll(href).on('enter', function (ele) {
        $('.pagesubnavcntr a').removeClass("active");
        $('.pagesubnavcntr a[href="' + href + '"]').addClass("active");
      });
      // Find section with id matching href
      /* $(''+href+'').waypoint(function(direction) {
          if (direction === 'down') {
              $('.pagesubnavcntr a').removeClass("active");
              $('.pagesubnavcntr a[href="'+href+'"]').addClass("active");
          }
      },{
              offset: "50%"
      });
      $(''+href+'').waypoint(function(direction) {
          if (direction === 'up') {
              $('.pagesubnavcntr a').removeClass("active");
              $('.pagesubnavcntr a[href="'+href+'"]').addClass("active");
              
          }
      },{
          offset: "0"
      }); */
    });
  }
  $(document).ready(function () {
    subNavFunction();
  });
  window.addEventListener("resize", function () {
    subNavFunction();
  });

  // Sticky Header Nav
  $(window).scroll(function () {
    if ($('.isi-inPageHeader').length > 0) {
      if (window.innerWidth >= 1024) {
        if ($subNav.length) {
          var scrollToElem = $subNav.offset().top + 60;
        }
        var endElem = $('.isi-inPageHeader').offset().top + 0;
      } else {
        if ($subNav.length) {
          var subnavHeight = $('[data-module="PageSubnav"]').outerHeight();
          var scrollToElem = $subNav.offset().top + subnavHeight;
        }
        var endElem = $('.isi-inPageHeader').offset().top;
      }
      if ($stickPoint.length) {
        if ($(window).scrollTop() >= scrollToElem) {
          $stickPoint.addClass('scrolled');
          if ($(window).scrollTop() >= endElem) {
            $stickPoint.removeClass('scrolled');
          } else {
            $stickPoint.addClass('scrolled');
          }
        } else {
          $stickPoint.removeClass('scrolled');
        }
      }
    }
  });

  // Homepage
  function homepageScroll() {
    if (document.body.classList.contains('Page-Strensiq_Patient_com') || document.body.classList.contains('Page-STRENSIQ_PATIENT_COM')) {
      var jumpbutton = $('.Page-STRENSIQ_PATIENT_COM .jumpbutton a');
      jumpbutton.on('click', function (e) {
        e.preventDefault();
        $('html, body').animate({
          scrollTop: $('#questionstop').offset().top
        }, 1000);
      });
      if (window.innerWidth >= 1024) {
        var targethome = $('.homeHeroopacity');
        var homeQuestions = $('.homeQuestions');
        var targetHeight = targethome.outerHeight();
        var targetHeight2 = homeQuestions.outerHeight();
        $('.homeHeroboyiso').outerHeight(targetHeight);
        $(document).scroll(function (e) {
          var scrollPercent = (targetHeight - window.scrollY) / targetHeight;
          var scrollPercent2 = scrollPercent + (targetHeight2 - window.scrollY) / targetHeight2 + .4;
          if (scrollPercent >= 0) {
            targethome.css('opacity', 0 + scrollPercent);
            jumpbutton.css('opacity', 0 + scrollPercent);
          }
          if (scrollPercent2 <= targetHeight2) {
            homeQuestions.css('opacity', 1 - scrollPercent2);
          }
        });
      } else {
        return;
      }
    }
  }

  homepageScroll();
  window.addEventListener("resize", function () {
    homepageScroll();
  });

  // Homepage Opacity
  function homepageOpacity() {
    if (window.innerWidth >= 1024) {
      var lastScrollTop = 0;
      if (document.body.classList.contains('Page-Strensiq_Patient_com') || document.body.classList.contains('Page-STRENSIQ_PATIENT_COM')) {
        var checkScroll = function checkScroll() {
          if ($(window).scrollTop() <= 0) {
            $('.homeQuestions').css('opacity', 0);
          }
        };

        $(window).on('load', function () {
          checkScroll();
        });
        // $(window).scroll(function () {
        //   var $bed = $('.homeHero-bed');
        //   var $boy = $('.homeHero-boy');
        //   var st = window.pageYOffset || document.documentElement.scrollTop;
        //   if (document.body.classList.contains('withCookie')) {
        //     if ($boy.length) {
        //       var scrollToElem1 = $bed.offset().top - 560;
        //     }
        //     var endElem1 = $('.momandkid').offset().top - 300;
        //   } else {
        //     if ($boy.length) {
        //       var scrollToElem1 = $bed.offset().top - 560;
        //     }
        //     var endElem1 = $('.doctorexam').offset().top - 300;
        //   }
        //   if ($boy.length) {
        //     var animateTo = function animateTo(anchor) {
        //       page.animate({
        //         scrollTop: $(anchor).offset().top
        //       }, 1000);
        //     };

        //     var page = $('html, body');

        //     var scrolled = false;
        //     /* var inview = new Waypoint.Inview({
        //         element: $('.homeHeroopacity'),
        //         enter: function(direction) {
        //             if (direction === 'up'){
        //                 if(!scrolled){
        //                     animateTo('#content');
        //                     scrolled = true;
        //                 }
        //                 setTimeout(scrolled = false, 1000);
        //                 console.log(scrolled, 'up')
        //             }
        //         },
        //         exit: function(direction) {
        //             if(!scrolled){
        //                 if (direction === 'down'){
        //                     animateTo('#questionstop');
        //                     scrolled = true;
        //                 }
        //             }
        //         },
        //         offset: 'bottom-in-view'
        //     }) */
        //     /* $.fn.isInViewport = function () {
        //         let elementTop = $(this).offset().top;
        //         let elementBottom = elementTop + $(this).outerHeight();

        //         let viewportTop = $(window).scrollTop();
        //         let viewportBottom = viewportTop + $(window).height();

        //         return elementBottom > viewportTop && elementTop < viewportBottom;
        //     };
        //     if ($('.homeHero-bed').isInViewport()) {
        //         if (st > lastScrollTop){
        //             animateTo('#questionstop');
        //             page.on("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove", function(){
        //                 page.stop();
        //             });
        //         }
        //     } else if ($('#questionstop').isInViewport()) {
        //         if (st < lastScrollTop){
        //             animateTo('#content');
        //             page.on("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove", function(){
        //                 page.stop();
        //             });
        //         }
        //     }
        //     lastScrollTop = st <= 0 ? 0 : st; */
        //     if ($(window).scrollTop() >= scrollToElem1) {
        //       $boy.addClass('fixed');
        //       $('#content').addClass('faded');
        //       if ($(window).scrollTop() >= endElem1) {
        //         $boy.removeClass('fixed');
        //         $('.momandkid').addClass('boyfade');
        //       } else {
        //         $boy.addClass('fixed');
        //         $('.momandkid').removeClass('boyfade');
        //       }
        //     } else {
        //       $boy.removeClass('fixed');
        //     }
        //   }
        // });
      }
    }
  }
  homepageOpacity();
  window.addEventListener("resize", function () {
    homepageOpacity();
  });
});

// Scrolljacking
$(function () {
  // left: 37, up: 38, right: 39, down: 40,
  // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
  var keys = { 37: 1, 38: 1, 39: 1, 40: 1 };

  function preventDefault(e) {
    e.preventDefault();
  }

  function preventDefaultForScrollKeys(e) {
    if (keys[e.keyCode]) {
      preventDefault(e);
      return false;
    }
  }

  // modern Chrome requires { passive: false } when adding event
  var supportsPassive = false;
  try {
    window.addEventListener("test", null, Object.defineProperty({}, 'passive', {
      get: function get() {
        supportsPassive = true;
      }
    }));
  } catch (e) { }

  var wheelOpt = supportsPassive ? { passive: false } : false;
  var wheelEvent = 'onwheel' in document.createElement('div') ? 'wheel' : 'mousewheel';

  // call this to Disable
  function disableScroll() {
    window.addEventListener('DOMMouseScroll', preventDefault, false); // older FF
    window.addEventListener(wheelEvent, preventDefault, wheelOpt); // modern desktop
    window.addEventListener('touchmove', preventDefault, wheelOpt); // mobile
    window.addEventListener('keydown', preventDefaultForScrollKeys, false);
  }

  // call this to Enable
  function enableScroll() {
    window.removeEventListener('DOMMouseScroll', preventDefault, false);
    window.removeEventListener(wheelEvent, preventDefault, wheelOpt);
    window.removeEventListener('touchmove', preventDefault, wheelOpt);
    window.removeEventListener('keydown', preventDefaultForScrollKeys, false);
  }
  var delay = false;
  function scrollJacking() {
    if (window.innerWidth >= 1024) {
      $(document).on('mousewheel DOMMouseScroll', function (event) {
        if (delay) return;
        console.log(window.innerWidth);
        delay = true;
        setTimeout(function () {
          enableScroll(); delay = false;
        }, 1000);

        var wd = event.originalEvent.wheelDelta || -event.originalEvent.detail;
        var a = document.getElementsByTagName('article');
        if (wd < 0) {
          for (var i = 0; i < a.length; i++) {
            var t = a[i].getClientRects()[0].top;
            if (t >= 40) break;
          }
        } else {
          for (var i = a.length - 1; i >= 0; i--) {
            var t = a[i].getClientRects()[0].top;
            if (t < -40) break;
          }
        }

        if (i >= 0 && i < a.length) {
          $('html,body').animate({
            scrollTop: a[i].offsetTop
          }, 1000);
          setTimeout(function () {
            disableScroll();
          }, 500);
          setTimeout(function () {
            if (window.scrollY == 0) {
              $('nav').removeClass('hidebar');
            } else {
              $('nav').addClass('hidebar');
            }
          }, 1000);
        }
      });
    }
  }
  scrollJacking();
  window.addEventListener("resize", function () {
    scrollJacking();
  });
});